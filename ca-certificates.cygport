NAME="ca-certificates"
VERSION=2.4
RELEASE=2
CATEGORY="Net"
SUMMARY="CA root certificates"
DESCRIPTION="Mozilla's CA root certificates for use with OpenSSL and GNU-TLS."
HOMEPAGE="http://www.mozilla.org/projects/security/certs/"
SRC_URI="fedora/certdata.txt
	 fedora/nssckbi.h
	 fedora/update-ca-trust
	 fedora/trust-fixes
	 fedora/certdata2pem.py
	 fedora/ca-legacy.conf
	 fedora/ca-legacy
	 fedora/update-ca-trust.8.txt
	 fedora/README.usr
	 fedora/README.etc
	 fedora/README.extr
	 fedora/README.java
	 fedora/README.openssl
	 fedora/README.pem
	 fedora/README.src
"
SRC_DIR=.

ARCH=noarch

DEPEND="asciidoc openssl python libxslt"

ca_certificates_REQUIRES="p11-kit p11-kit-trust"
ca_certificates_CONTENTS="etc/defaults/ etc/pki/ etc/postinstall/ etc/preremove/
			  etc/ssl/ usr/bin/ usr/lib/p11-kit/
			  usr/lib/security/ usr/share/man/ usr/share/pki/ usr/ssl/"

src_compile() {
	mkdir -p ${B}/certs/legacy-{default,disable}
	cd ${B}/certs
	cp ${S}/certdata.txt .
	python ${S}/certdata2pem.py

	cd ${B}
	(
		cat <<EOF
# This is a bundle of X.509 certificates of public Certificate
# Authorities.  It was generated from the Mozilla root CA list.
# These certificates are in the OpenSSL "TRUSTED CERTIFICATE"
# format and have trust bits set accordingly.
# An exception are auxiliary certificates, without positive or negative
# trust, but are used to assist in finding a preferred trust path.
# Those neutral certificates use the plain BEGIN CERTIFICATE format.
#
# Source: mozilla/security/nss/lib/ckfw/builtins/certdata.txt
# Source: mozilla/security/nss/lib/ckfw/builtins/nssckbi.h
#
# Generated from:
EOF
		grep -w NSS_BUILTINS_LIBRARY_VERSION ${S}/nssckbi.h | awk '{print "# " $2 " " $3}';
		echo '#';
	) > ca-bundle.trust.crt

	> ca-bundle.neutral-trust.crt

	for f in certs/*.crt
	do
		echo "processing $f"
		tbits=`sed -n '/^# openssl-trust/{s/^.*=//;p;}' $f`
		distbits=`sed -n '/^# openssl-distrust/{s/^.*=//;p;}' $f`
		alias=`sed -n '/^# alias=/{s/^.*=//;p;q;}' $f | sed "s/'//g" | sed 's/"//g'`
		targs=""

		if [ -n "$tbits" ]
		then
			for t in $tbits
			do
				targs="${targs} -addtrust $t"
			done
		fi
		if [ -n "$distbits" ]
		then
			for t in $distbits
			do
				targs="${targs} -addreject $t"
			done
		fi
		if [ -n "$targs" ]
		then
			echo "trust flags $targs for $f" >> info.trust
			openssl x509 -text -in "$f" -trustout $targs -setalias "$alias" >> ca-bundle.trust.crt
		else
			echo "no trust flags for $f" >> info.notrust
			openssl x509 -text -in "$f" >> ca-bundle.neutral-trust.crt
		fi
	done
	for f in certs/legacy-default/*.crt
	do
		echo "processing $f"
		tbits=`sed -n '/^# openssl-trust/{s/^.*=//;p;}' $f`
		alias=`sed -n '/^# alias=/{s/^.*=//;p;q;}' $f | sed "s/'//g" | sed 's/"//g'`
		targs=""
		if [ -n "$tbits" ]
		then
			for t in $tbits
			do
				targs="$targs -addtrust $t"
			done
		fi
		if [ -n "$targs" ]
		then
			echo "legacy default flags $targs for $f" >> info.trust
			openssl x509 -text -in "$f" -trustout $targs -setalias "$alias" >> ca-bundle.legacy.default.crt
		fi
	done

	for f in certs/legacy-disable/*.crt
	do
		echo "processing $f"
		tbits=`sed -n '/^# openssl-trust/{s/^.*=//;p;}' $f`
		alias=`sed -n '/^# alias=/{s/^.*=//;p;q;}' $f | sed "s/'//g" | sed 's/"//g'`
		targs=""
		if [ -n "$tbits" ]
		then
			for t in $tbits
			do
				targs="${targs} -addtrust $t"
			done
		fi
		if [ -n "$targs" ]
		then
			echo "legacy disable flags $targs for $f" >> info.trust
			openssl x509 -text -in "$f" -trustout $targs -setalias "$alias" >> ca-bundle.legacy.disable.crt
		fi
	done

	P11FILES=`find certs -name *.p11-kit | wc -l`
	if [ $P11FILES -ne 0 ]
	then
		for p in certs/*.p11-kit
		do
			cat "$p" >> ca-bundle.supplement.p11-kit
		done
	fi
	cat ${S}/trust-fixes >> ca-bundle.supplement.p11-kit

	asciidoc -v -d manpage -b docbook -o ${B}/update-ca-trust.8.xml ${S}/update-ca-trust.8.txt
	xsltproc --nonet -o ${B}/update-ca-trust.8 /etc/asciidoc/docbook-xsl/manpage.xsl ${B}/update-ca-trust.8.xml
}

src_install() {
	dobin ${S}/update-ca-trust ${S}/ca-legacy
	doman ${B}/update-ca-trust.8

	# for p11-kit
	dodir /usr/lib/p11-kit
	dosym ../../bin/update-ca-trust /usr/lib/p11-kit/trust-extract-compat

	insinto /usr/share/pki/ca-trust-source
	doins ${B}/ca-bundle.{trust.crt,neutral-trust.crt,supplement.p11-kit}
	newins ${S}/README.usr README
	dodir /usr/share/pki/ca-trust-source/{anchors,blacklist}
	keepdir /usr/share/pki/ca-trust-source/{anchors,blacklist}

	insinto /usr/share/pki/ca-trust-legacy
	doins ${B}/ca-bundle.legacy.{default,disable}.crt

	insinto /etc/pki/ca-trust
	doins ${S}/ca-legacy.conf
	make_etc_defaults /etc/pki/ca-trust/ca-legacy.conf

	cat >> ${D}/etc/postinstall/${NAME}.sh <<-_EOF
		/usr/bin/ca-legacy install
		/usr/bin/update-ca-trust
	_EOF

	# touch all files overwritten by update-ca-trust for easy cleanup
	insinto /etc/pki/ca-trust/extracted
	newins ${S}/README.extr README

	insinto /etc/pki/ca-trust/extracted/openssl
	newins ${S}/README.openssl README
	touch ${D}/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt

	insinto /etc/pki/ca-trust/extracted/pem
	newins ${S}/README.pem README
	touch ${D}/etc/pki/ca-trust/extracted/pem/{tls,email,objsign}-ca-bundle.pem

	insinto /etc/pki/ca-trust/extracted/java
	newins ${S}/README.java README
	touch ${D}/etc/pki/ca-trust/extracted/java/cacerts

	insinto /etc/pki/ca-trust/source
	newins ${S}/README.src README
	dodir /etc/pki/ca-trust/source/{anchors,blacklist}
	keepdir /etc/pki/ca-trust/source/{anchors,blacklist}

	dodir /usr/ssl/certs /etc/ssl /etc/pki/tls
	# for OpenSSL
	dosym /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /usr/ssl/cert.pem
	# for backwards compatibility
	dosym /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /usr/ssl/certs/ca-bundle.crt
	dosym /etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt /usr/ssl/certs/ca-bundle.trust.crt
	# for other hardcoded ca-certificates consumers
	dosym /usr/ssl/certs /etc/ssl/certs
	dosym /usr/ssl/certs /etc/pki/tls/certs
	dosym /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /etc/pki/tls/cert.pem

	# for GNU Classpath Java
	dodir /usr/lib/security
	dosym /etc/pki/ca-trust/extracted/java/cacerts /usr/lib/security/cacerts
}
